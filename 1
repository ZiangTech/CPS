#include "lab03.h"

#include <xc.h>
//do not change the order of the following 2 definitions
#define FCY 12800000UL
#include <libpic30.h>

#include "types.h"
#include "lcd.h"
#include "led.h"

/*
 * DAC code
 */

#define DAC_CS_TRIS TRISDbits.TRISD8
#define DAC_SDI_TRIS TRISBbits.TRISB10
#define DAC_SCK_TRIS TRISBbits.TRISB11
#define DAC_LDAC_TRIS TRISBbits.TRISB13
    
#define DAC_CS_PORT PORTDbits.RD8
#define DAC_SDI_PORT PORTBbits.RB10
#define DAC_SCK_PORT PORTBbits.RB11
#define DAC_LDAC_PORT PORTBbits.RB13

#define DAC_SDI_AD1CFG AD1PCFGLbits.PCFG10
#define DAC_SCK_AD1CFG AD1PCFGLbits.PCFG11
#define DAC_LDAC_AD1CFG AD1PCFGLbits.PCFG13

#define DAC_SDI_AD2CFG AD2PCFGLbits.PCFG10
#define DAC_SCK_AD2CFG AD2PCFGLbits.PCFG11
#define DAC_LDAC_AD2CFG AD2PCFGLbits.PCFG13

// Variables for DAC operation
volatile uint8_t counter = 0;
volatile uint16_t Vol1_0 = 819;  // Voltage level for 1V
volatile uint16_t Vol2_5 = 2048;  // Voltage level for 2.5V
volatile uint16_t Vol3_5 = 2867;  // Voltage level for 3.5V
volatile uint16_t SDILINE;

void dac_initialize()
{
    // set AN10, AN11 AN13 to digital mode
    // this means AN10 will become RB10, AN11->RB11, AN13->RB13
    // see datasheet 11.3
    // set RD8, RB10, RB11, RB13 as output pins

    // DAC CS(Pin8) Configuration
    CLEARBIT(DAC_CS_TRIS); // Set RB8 to Output
    Nop(); 

    // DAC SCK(Pin11) Configuration
    SETBIT(DAC_SCK_AD1CFG); // Set ADC1's Pin11 to Digital
    Nop(); 
    SETBIT(DAC_SCK_AD2CFG); // Set ADC2's Pin11 to Digital
    Nop();
    CLEARBIT(DAC_SCK_TRIS); // Set RB11 to Output
    Nop(); 
   
    // DAC SDI(Pin10) Configuration
    SETBIT(DAC_SDI_AD1CFG); // Set ADC1's Pin10 to Digital
    Nop(); 
    SETBIT(DAC_SDI_AD2CFG); // Set ADC2's Pin10 to Digital
    Nop(); 
    CLEARBIT(DAC_SDI_TRIS); // Set RB10 to Output
    Nop(); 

    // DAC SCK(Pin13) Configuration
    SETBIT(DAC_LDAC_AD1CFG); // Set ADC1's Pin13 to Digital
    Nop(); 
    SETBIT(DAC_LDAC_AD2CFG); // Set ADC1's Pin13 to Digital
    Nop(); 
    CLEARBIT(DAC_LDAC_TRIS); // Set RB13 to Output
    Nop();

    // set default state: CS=??, SCK=??, SDI=??, LDAC=??
    SETBIT(DAC_CS_PORT); // CS = 1
    Nop(); 
    CLEARBIT(DAC_SDI_PORT); // SDI = 0
    Nop(); 
    CLEARBIT(DAC_SCK_PORT); // SCK = 0
    Nop(); 
    SETBIT(DAC_LDAC_PORT); // LDAC = 1
    Nop(); 
}

/*
 * Timer code
 */

#define FCY_EXT   32768UL

#define TCKPS_1   0x00
#define TCKPS_8   0x01
#define TCKPS_64  0x02
#define TCKPS_256 0x03

void timer_initialize()
{
    // Enable RTC Oscillator -> this effectively does OSCCONbits.LPOSCEN = 1
    // but the OSCCON register is lock protected. That means you would have to 
    // write a specific sequence of numbers to the register OSCCONL. After that 
    // the write access to OSCCONL will be enabled for one instruction cycle.
    // The function __builtin_write_OSCCONL(val) does the unlocking sequence and
    // afterwards writes the value val to that register. (OSCCONL represents the
    // lower 8 bits of the register OSCCON)
    __builtin_write_OSCCONL(OSCCONL | 2);
    
    // configure timer
    T1CONbits.TON = 0; // Disable Timer1
    T1CONbits.TCKPS = TCKPS_64; // Set Timer1 prescaler to 1:64
    T1CONbits.TCS = 1;  // Use external clock source
    T1CONbits.TGATE = 0; // Disable gated time accumulation
    T1CONbits.TSYNC = 0; // Disable synchronization

    PR1 = FCY_EXT * 0.5 / 64; // Set Timer1 period for delay calculation
    TMR1 = 0x00; // Reset Timer Values

    IPC0bits.T1IP = 0x07; // Set Timer1 interrupt priority
    IFS0bits.T1IF = 0; // Clear Timer1 interrupt flag
    IEC0bits.T1IE = 1; // Enable Timer1 interrupt
    T1CONbits.TON = 1; // Enable Timer1
}


/*
 * main loop
 */

void main_loop()
{
    // print assignment information
    lcd_printf("Lab03: DAC");
    lcd_locate(0, 1);
    lcd_printf("Group: 3");
    
    while(TRUE)
    {
        // main loop code
    }
}

// interrupt service routine?
void __attribute__((__interrupt__, __shadow__, __auto_psv__)) _T1Interrupt(void)
{
    // Clear Timer1 interrupt flag
    IFS0bits.T1IF = 0; 

    // Switch case to cycle through different voltage levels and delays
    switch (counter)
    {
        case 0:
            SDILINE = (0b1 << 12) | Vol1_0; // Open the SHDN and store the value of voltage 1V in SDI Data
            T1CONbits.TON = 0; // Turn off Timer1
            PR1 = FCY_EXT * 2 / 64; // Set Timer1 period for 2000ms delay (for case 1)
            counter = 1; // Move to next case
            break; // Waiting for the execution of case 1
        case 1:
            SDILINE = (0b1 << 12) | Vol2_5; // Set DAC output to 2.5V           
            T1CONbits.TON = 0; // Turn off Timer1
            PR1 = FCY_EXT * 1 / 64; // Set Timer1 period for 1000ms delay (for case 2)
            counter = 2; // Move to next case
            break; // Waiting for the execution of case 2
        case 2:
            SDILINE = (0b1 << 12) | Vol3_5; // Set DAC output to 3.5V
            T1CONbits.TON = 0; // Turn off Timer1
            PR1 = FCY_EXT * 0.5 / 64; // Set Timer1 period for 500ms delay (for case 0)
            counter = 0; // Reset to first case
            LED1_PORT ^= 1; // Toggle LED1 each iteration
            break; // Waiting for the execution of case 0
    }   

    // DAC data transmission
    uint16_t i;

    CLEARBIT(DAC_CS_PORT); // CS = 0, starting to catch signal
    Nop(); // Waiting

    for(i = 0; i < 16; i++)
    {
        // Transmit each bit of SDIDATA to DAC
        DAC_SDI_PORT = ((SDILINE >> (15 - i)) & 0b1); // Execute from bit15 -> bit0
        Nop(); 
        SETBIT(DAC_SCK_PORT); // Set SCK to transmit bit
        Nop(); 
        CLEARBIT(DAC_SCK_PORT); // Clear SCK after transmitting bit
        Nop(); 
    }

    // Complete DAC data transmission
    SETBIT(DAC_CS_PORT); // CS = 1
    Nop(); 
    CLEARBIT(DAC_SDI_PORT); // SDI = 0
    Nop(); 
    CLEARBIT(DAC_LDAC_PORT); // LDAC = 0, updating the VOUTB
    Nop(); 
    SETBIT(DAC_LDAC_PORT); // LDAC = 1
    Nop(); 

    // Reset Timer1 Counter and Restart Timer1
    TMR1 = 0; // Reset Timer1 counter
    T1CONbits.TON = 1; // Restart Timer1
}
